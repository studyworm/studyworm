-- Autogenerated: do not edit this file

CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME TIMESTAMP(9) NOT NULL,
	START_TIME TIMESTAMP(9) DEFAULT NULL ,
	END_TIME TIMESTAMP(9) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED TIMESTAMP(9),
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	PARAMETER_NAME VARCHAR(100) NOT NULL ,
	PARAMETER_TYPE VARCHAR(100) NOT NULL ,
	PARAMETER_VALUE VARCHAR(2500) ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	CREATE_TIME TIMESTAMP(9) NOT NULL,
	START_TIME TIMESTAMP(9) DEFAULT NULL ,
	END_TIME TIMESTAMP(9) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED TIMESTAMP(9),
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT LONGVARCHAR ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT LONGVARCHAR ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_SEQ;

-- 비즈니스 로직에서 사용할려고 추 
CREATE SCHEMA IF NOT EXISTS MCAPTFLE;
CREATE SCHEMA IF NOT EXISTS MCHPTFLE;

CREATE ALIAS FNCCMM200Q FOR "com.mobis.as.mpsa.ph.utils.MessageUtils.fnccmm200q";

CREATE TABLE IF NOT EXISTS MCAPTFLE.PFCPHOCF (
    SAM_ORD_NO VARCHAR(50),
    SAM_PRFM_NO VARCHAR(50),
    SAM_CFM_DT DATE,
    W_KEY_SEQ VARCHAR(50),
    SAM_TOT_AMT DECIMAL(15,2),
    SAM_TQT DECIMAL(15,2),
    SAM_TOT_ITM DECIMAL(15,2),
    SAM_TOT_VOL DECIMAL(15,2),
    SAM_TOT_WG DECIMAL(15,2),
    SAM_ORD_LN VARCHAR(50),
    SAM_ORD_SF VARCHAR(50),
    W_CMP_KND VARCHAR(50),
    SAM_CFM_PNO VARCHAR(50),
    SAM_CFM_PNM VARCHAR(100),
    SAM_NOR_QT DECIMAL(15,2),
    SAM_ABN_QT DECIMAL(15,2),
    SAM_UPRI DECIMAL(15,2),
    SAM_AMD_CD VARCHAR(50),
    SAM_ORD_PNO VARCHAR(50),
    SAM_ETD DATE,
    SAM_ITMD_TRD VARCHAR(50),
    P2_DT DATE,
    WT_PDC VARCHAR(50),
    WT_MBR VARCHAR(50),
    WT_FLE VARCHAR(50),
    WT_LIB VARCHAR(50),
    OCF_ORD_OSF VARCHAR(50),
    OCF_INS_DT DATE,
    OCF_INS_TIM TIME,
    OCF_INS_USR VARCHAR(50),
    OCF_UPD_DT DATE,
    OCF_UPD_TIM TIME,
    OCF_UPD_USR VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS MCHPTFLE.PFCUZLOG (
    LOG_DAT VARCHAR(20),
    LOG_PDC VARCHAR(50),
    LOG_PGM VARCHAR(50),
    LOG_USR VARCHAR(50),
    LOG_SEQ INTEGER,
    LOG_SE2 INTEGER,
    LOG_STM VARCHAR(20),
    LOG_ETM VARCHAR(20),
    LOG_RTC VARCHAR(20),
    LOG_SQL VARCHAR(1000),
    LOG_MSG VARCHAR(1000),
    LOG_MCD VARCHAR(100),
    LOG_MTX VARCHAR(1000),
    LOG_IP VARCHAR(50)
);